add
and
brn
brp
brnp
brz
brnz
brzp
brnzp
halt
jmp
jsr
jsrr
ldb
ldw
lea
nop
not
ret
lshf
rshfl
rshfa
rti
stb
stw
trap
xor


ADD R1, R2, R3
ADD R1, R2, x5
ADD R1, R1, x-5
ADD R1, R1, x-1
AND R0, R5, R6
AND R3, R6, #-6
XOR R1, R2, R3
XOR R1, R2, xa
NOT R1, R1
NOT R7, R1
TRAP x25
TRAP 255
STW R7, R6, #0
STB R7, R6, #0
STW R7, R6, #1
STB R7, R6, #1
LDW R0, R6, #0
LDB R0, R6, #0
LDW R0, R6, #1
LDB R0, R6, #1
LEA R2, label
JMP R2
JSRR R2
JSRR R7
JSR  label
RET
LSHF R2, R3, #4
LSHF R2, R3, #0
RSHFL R2, R6, #4
RSHFA R2, R6, #4
BRn label
BRz label
BRp label
BRnp label
BRzp label
BR label














0x3000
0xEC60
0x6D80
0x4801
0xF025
0x7FBF
0x1DBE
0x4806
0xE010
0x4000
0x4817
0x6F80
0x1DA2
0xC1C0
0xE03C
0xE640
0x96FF
0x16FF
0x54A0
0x6200
0x1481
0x1022
0x1203
0x0BFB
0xC1C0
0xE037
0xE239
0x2400
0x0404
0x3440
0x1021
0x1261
0x0FFA
0xC1C0
0x7FBF
0x1DBE
0xE032
0x5920
0x1921
0x6200
0x6401
0x5642
0x9683
0x1443
0x6202
0x4814
0x6203
0x6404
0x1442
0x6205
0x480F
0x6206
0xD473
0x6207
0x480B
0x6206
0xD442
0x6208
0x4807
0x6206









0x3000
0xEC60
0x6D80
0x4801
0xF025
0x7FBF
0x1DBE
0x4806
0xE010
0x4000
0x4817
0x6F80
0x1DA2
0xC1C0
0xE03C
0xE640
0x96FF
0x16FF
0x54A0
0x6200
0x1481
0x1022
0x1203
0x0BFB
0xC1C0
0xE037
0xE239
0x2400
0x0404
0x3440
0x1021
0x1261
0x0FFA
0xC1C0
0x7FBF
0x1DBE
0xE032
0x5920
0x1921
0x6200
0x6401
0x5642
0x9683
0x1443
0x6202
0x4814
0x6203
0x6404
0x1442
0x6205
0x480F
0x6206
0xD473
0x6207
0x480B
0x6206
0xD442
0x6208
0x4807
0x6206








count char asm file

0x3000
0x54A0
0xE613
0x66C0
0xF023
0x22C0
0x187C
0x0408
0x927F
0x1240
0x927F
0x0A01
0x14A1
0x16E1
0x22C0
0x0FF6
0xE004
0x6000
0x1002
0xF021
0xF025
0x0030
0x4000


count char. asm file

0x3000
0x54A0
0xE613
0x66C0
0xF023
0x22C0
0x187C
0x0408
0x927F
0x1240
0x927F
0x0A01
0x14A1
0x16E1
0x22C0
0x0FF6
0xE004
0x6000
0x1002
0xF021
0xF025
0x0030
0x4000









0x3000
0xE00A
0x6000
0x2200
0x2401
0x1242
0x3202
0x0601
0x927F
0xD457
0x3403
0xF025
0x3100







int flag= ((code & 0x0020)>>5);
    int dr = ((code & 0x0E00)>>9);
    int sr1 = ((code & 0x01C0)>>6);
    if(flag==0){
        int sr2 =(code & 0x0007);
        int answer  = CURRENT_LATCHES.REGS[sr1]^CURRENT_LATCHES.REGS[sr2];
        int sign_answer= Low16bits(answer);
        NEXT_LATCHES.REGS[dr]= sign_answer;
        if(sign_answer==0){
            NEXT_LATCHES.Z=TRUE;
            NEXT_LATCHES.P=FALSE;
            NEXT_LATCHES.N=FALSE;
        }
        int sign_mem = (sign_answer & 0x8000) >>15;
        if(sign_mem){
            NEXT_LATCHES.Z=FALSE;
            NEXT_LATCHES.P=FALSE;
            NEXT_LATCHES.N=TRUE;
        }
        if(sign_mem==0){
            NEXT_LATCHES.Z=FALSE;
            NEXT_LATCHES.P=TRUE;
            NEXT_LATCHES.N=FALSE;
        }
    }
    else{
        int imm5= (code & 0x001F);
        int sign = (code & 0x0010)>>4;
        int extend_imm = sign ? imm5 | 0xFFE0 : imm5 & 0x001F;
        int answer= CURRENT_LATCHES.REGS[sr1] ^extend_imm;
        int sign_answer= Low16bits(answer);
        NEXT_LATCHES.REGS[dr]= sign_answer;
        if(sign_answer==0){
            NEXT_LATCHES.Z=TRUE;
            NEXT_LATCHES.P=FALSE;
            NEXT_LATCHES.N=FALSE;
        }
        int sign_mem = (sign_answer & 0x8000) >>15;
        if(sign_mem){
            NEXT_LATCHES.Z=FALSE;
            NEXT_LATCHES.P=FALSE;
            NEXT_LATCHES.N=TRUE;
        }
        if(sign_mem==0){
            NEXT_LATCHES.Z=FALSE;
            NEXT_LATCHES.P=TRUE;
            NEXT_LATCHES.N=FALSE;
        }
    }